/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.0-rc1
// source: video.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as video_pb from './video_pb'; // proto import: "video.proto"


export class VideoCallServiceClient {
  static SendSignal(SendSignal: any, arg1: { request: video_pb.SignalMessage; host: string; onEnd: (res: import("@improbable-eng/grpc-web/dist/typings/unary").UnaryOutput<import("@improbable-eng/grpc-web/dist/typings/message").ProtobufMessage>) => void; }) {
    throw new Error('Method not implemented.');
  }
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorJoinCall = new grpcWeb.MethodDescriptor(
    '/VideoCallService/JoinCall',
    grpcWeb.MethodType.SERVER_STREAMING,
    video_pb.JoinRequest,
    video_pb.CallResponse,
    (request: video_pb.JoinRequest) => {
      return request.serializeBinary();
    },
    video_pb.CallResponse.deserializeBinary
  );

  joinCall(
    request: video_pb.JoinRequest,
    metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<video_pb.CallResponse> {
    return this.client_.serverStreaming(
      this.hostname_ +
        '/VideoCallService/JoinCall',
      request,
      metadata || {},
      this.methodDescriptorJoinCall);
  }

  methodDescriptorSendSignal = new grpcWeb.MethodDescriptor(
    '/VideoCallService/SendSignal',
    grpcWeb.MethodType.UNARY,
    video_pb.SignalMessage,
    video_pb.SignalAck,
    (request: video_pb.SignalMessage) => {
      return request.serializeBinary();
    },
    video_pb.SignalAck.deserializeBinary
  );

  sendSignal(
    request: video_pb.SignalMessage,
    metadata?: grpcWeb.Metadata | null): Promise<video_pb.SignalAck>;

  sendSignal(
    request: video_pb.SignalMessage,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: video_pb.SignalAck) => void): grpcWeb.ClientReadableStream<video_pb.SignalAck>;

  sendSignal(
    request: video_pb.SignalMessage,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: video_pb.SignalAck) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/VideoCallService/SendSignal',
        request,
        metadata || {},
        this.methodDescriptorSendSignal,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/VideoCallService/SendSignal',
    request,
    metadata || {},
    this.methodDescriptorSendSignal);
  }

}

